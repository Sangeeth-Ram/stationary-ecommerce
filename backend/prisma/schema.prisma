// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["improvedQueryRaw"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  NEW
  PAID
  SHIPPED
  CANCELLED
  REFUNDED
}

enum PaymentProvider {
  RAZORPAY
  STRIPE
  PAYPAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model User {
  id           String     @id @default(cuid())
  supabaseUid  String     @unique
  email        String     @unique
  role         UserRole   @default(USER)
  name         String?
  phone        String?
  emailVerified Boolean    @default(false)
  lastSignInAt DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  cart         Cart[]
  orders       Order[]
}

model Category {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  parentId  String?
  children  Category[] @relation("CategoryToCategory")
  products  Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String
  priceCents  Int
  currency    String        @default("INR")
  sku         String        @unique
  status      String
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  String
  images      ProductImage[]
  inventory   Inventory?    @relation(fields: [inventoryId], references: [id])
  inventoryId String?       @unique
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  s3Key     String
  url       String
  altText   String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Inventory {
  id        String   @id @default(cuid())
  product   Product?
  quantity  Int      @default(0)
  lowStock  Int      @default(2)
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  status    String     @default("active")
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, status], name: "user_active_cart")
  @@index([userId])
}

model CartItem {
  id               String   @id @default(cuid())
  cart             Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId           String
  product          Product  @relation(fields: [productId], references: [id])
  productId        String
  quantity         Int
  priceSnapshotCents Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id               String      @id @default(cuid())
  user             User        @relation(fields: [userId], references: [id])
  userId           String
  status           OrderStatus @default(NEW)
  totalCents       Int
  currency         String      @default("INR")
  razorpayOrderId  String?
  addressSnapshot  Json
  items            OrderItem[]
  payments         Payment[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id           String   @id @default(cuid())
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String
  product      Product  @relation(fields: [productId], references: [id])
  productId    String
  quantity     Int
  priceCents   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Payment {
  id             String         @id @default(cuid())
  order          Order          @relation(fields: [orderId], references: [id])
  orderId        String
  provider       PaymentProvider
  status         PaymentStatus
  amountCents    Int
  providerRefs   Json           // Store provider-specific references (e.g., payment_id, order_id, etc.)
  rawWebhook     Json?          // Store complete webhook payload for debugging
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([orderId])
  @@index([status])
}

model BulkJob {
  id         String   @id @default(cuid())
  type       String   // e.g., 'PRODUCT_IMPORT', 'PRODUCT_EXPORT', etc.
  status     String   // 'PENDING', 'PROCESSING', 'COMPLETED', 'FAILED'
  fileKey    String?  // S3 key for input file
  resultKey  String?  // S3 key for result file (if any)
  errors     Json?    // Store any errors during processing
  metadata   Json?    // Additional job metadata
  startedAt  DateTime?
  completedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
